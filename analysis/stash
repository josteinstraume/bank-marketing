#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Nov 30 15:13:41 2017

@author: Jostein
"""
from scipy.cluster.hierarchy import dendrogram, linkage
from scipy.cluster.hierarchy import cophenet
from scipy.spatial.distance import pdist

# Hierarchical Clustering
# Source: https://joernhees.de/blog/2015/08/26/scipy-hierarchical-clustering-and-dendrogram-tutorial/
bank_new = linkage(bank, 'ward')

c, coph_dists = cophenet(bank_new, pdist(X))
c

# Dendrogram
plt.figure(figsize=(25, 10))
plt.title('Hierarchical Clustering Dendrogram')
plt.xlabel('sample index')
plt.ylabel('distance')
dendrogram(
    bank,
    leaf_rotation=90.,  # rotates the x axis labels
    leaf_font_size=8.,  # font size for the x axis labels
)
plt.show()


# For loop testing stuff
bank.head()

bank.dtypes
bank.head()

np.integer(bank['age'])

isinstance(bank['age'].dtypes, object)
bank['age'].dtypes
bank['age']

type(bank.columns) == np.int

bank['age'].dtypes == 'int64'
bank['age'].is_integer()

# For loop to encode dummy variables
bank_new = pd.DataFrame()
for column in bank.columns:
    if bank[column].dtypes != 'int64' and column != 'y':
        temp = column + '_id'
        temp = pd.get_dummies(bank[column], drop_first=True)
        print(temp.head())
        #result = pd.concat(temp)
        data1 = bank.join(temp)

data1.head()

new_bank = pd.Series(bank[['job', 'marital', 'education',
                          'default', 'housing', 'loan',
                          'contact', 'month', 'poutcome',
                          'y']], dtype="category")
new_bank.dtypes
new_bank.head()

# Turn the data into a data frame
# Source:
# http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html
# Not needed, already is a data frame
#df = pd.DataFrame(data=bank)

#new_bank = pd.concat([bank[smart_cols]], dum_bank)
new_bank = pd.DataFrame(bank[smart_cols]).join(dum_bank)
#new_bank.join(bank[smart_cols])
#new_bank.join([bank[smart_cols], dum_bank])
#new_bank.merge(dum_bank, how='inner', sort='False')
new_bank.join(dum_bank)
new_bank.head()
new_bank.columns


# Default, housing, and loan are unkown

# Factorize categorical variables
# labels, levels = pd.factorize(df.Class)
# Source: http://www.data-mania.com/blog/logistic-regression-example-in-python/
# Python forgive me, for I have sinned
# Yes I know the following is awful, but the for loop wasn't working
job_dmy = pd.get_dummies(bank['job'], drop_first=True)
marital_dmy = pd.get_dummies(bank['marital'], drop_first=True)
education_dmy = pd.get_dummies(bank['education'], drop_first=True)
default_dmy = pd.get_dummies(bank['default'], drop_first=True)
housing_dmy = pd.get_dummies(bank['housing'], drop_first=True)
loan_dmy = pd.get_dummies(bank['loan'], drop_first=True)
contact_dmy = pd.get_dummies(bank['contact'], drop_first=True)
month_dmy = pd.get_dummies(bank['month'], drop_first=True)
poutcome_dmy = pd.get_dummies(bank['poutcome'], drop_first=True)
y_dmy = pd.get_dummies(bank['y'], drop_first=True)

# Check the structure of the dummy variables
job_dmy.head()
marital_dmy.head()
education_dmy.head()
default_dmy.head()
housing_dmy.head()
loan_dmy.head()
contact_dmy.head()
month_dmy.head()
poutcome_dmy.head()
y_dmy.head()

bank.drop(['job', 'marital', 'education', 'default', 'housing', 'loan', 'contact', 'month', 'poutcome', 'y'], axis=1, inplace=True)

# Check if variables were dropped
bank.head()

# Create new data frame with int and dummy variables
bank_dmy = pd.concat([bank, job_dmy, marital_dmy, education_dmy, default_dmy,
                      housing_dmy, loan_dmy, contact_dmy, month_dmy,
                      poutcome_dmy, y_dmy], axis=1)
bank_dmy.head()
bank_dmy.columns
print(bank_dmy)

sns.set(style="darkgrid")
sns.countplot(y='job', data=bank, palette='hls') # Has unknowns
plt.figure()
sns.countplot(y='marital', data=bank, palette='hls')
plt.figure()
sns.countplot(y='education', data=bank, palette='hls') # Has unknowns
plt.figure()
sns.countplot(x='default', data=bank, palette='hls')
#sns.countplot(y='balance', data=bank, palette='hls')
sns.countplot(x='housing', data=bank, palette='hls')
plt.figure()
sns.countplot(x='loan', data=bank, palette='hls')
plt.figure()
sns.countplot(x='contact', data=bank, palette='hls') # Unknowns, silly variable
plt.figure()
sns.countplot(x='poutcome', data=bank, palette='hls') # Has bigly unknowns
